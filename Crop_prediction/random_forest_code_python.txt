import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score


dta = pd.read_csv('Crop_recommendation.csv', sep=';')



print("Random forest sur l'ensemble des cultures : ")

# Séparer les variables explicatives et la variable cible
X = dta.drop(columns='label')  # Toutes les colonnes sauf 'label'
y = dta['label']

# Diviser en jeu d'entraînement et de test (75%/25%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Modèle Random Forest avec validation croisée à 10 folds
rf_model = RandomForestClassifier(random_state=42)
cross_val_scores = cross_val_score(rf_model, X_train, y_train, cv=10)

# Afficher la performance moyenne pendant la validation croisée
print(f"Cross-validation accuracy: {cross_val_scores.mean()}")

# Entraîner le modèle sur l'ensemble d'entraînement
rf_model.fit(X_train, y_train)

# Prédictions sur l'ensemble de test
y_pred = rf_model.predict(X_test)

# Matrice de confusion et précision (accuracy)
conf_matrix = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print(f"Matrice de confusion :\n{conf_matrix}")
print(f"Accuracy: {accuracy}")


 
print("Random forest sur les sous-ensembles de cultures similaires :")

# Filtrer les cultures similaires (Coffee, Cotton, Maize, Rice, Jute)
cultures_similaires = ['coffee', 'cotton', 'maize', 'rice', 'jute']
filtered_data = dta[dta['label'].isin(cultures_similaires)]

# Réassigner X et y pour les sous-ensembles de cultures similaires
X_filtered = filtered_data.drop(columns='label')
y_filtered = filtered_data['label']

# Diviser en jeu d'entraînement et de test (75%/25%)
X_train, X_test, y_train, y_test = train_test_split(X_filtered, y_filtered, test_size=0.25, random_state=42)

# Entraîner le modèle Random Forest
rf_model_similar = RandomForestClassifier(random_state=42)


rf_model_similar.fit(X_train, y_train)

# Prédictions sur l'ensemble de test filtré
y_pred_filtered = rf_model_similar.predict(X_test)

# Matrice de confusion et précision pour le sous-ensemble
conf_matrix_filtered = confusion_matrix(y_test, y_pred_filtered)
accuracy_filtered = accuracy_score(y_test, y_pred_filtered)

print(f"Matrice de confusion pour les cultures similaires:\n{conf_matrix_filtered}")
print(f"Accuracy pour les cultures similaires: {accuracy_filtered}")





print("Random forest sur les sous-ensembles de cultures différentes :")

# Filtrer les cultures variées (Banana, Lentil, Apple, Mango, Chickpea)
cultures_variees = ['banana', 'lentil', 'apple', 'mango', 'chickpea']
filtered_data_variees = dta[dta['label'].isin(cultures_variees)]

# Réassigner X et y pour les sous-ensembles de cultures variées
X_filtered_variees = filtered_data_variees.drop(columns='label')
y_filtered_variees = filtered_data_variees['label']

# Diviser en jeu d'entraînement et de test (75%/25%)
X_train_variees, X_test_variees, y_train_variees, y_test_variees = train_test_split(X_filtered_variees, y_filtered_variees, test_size=0.25, random_state=42)

# Entraîner le modèle Random Forest
rf_model_variees = RandomForestClassifier(random_state=42)
rf_model_variees.fit(X_train_variees, y_train_variees)

# Prédictions sur l'ensemble de test filtré
y_pred_filtered_variees = rf_model_variees.predict(X_test_variees)

# Matrice de confusion et précision pour le sous-ensemble
conf_matrix_filtered_variees = confusion_matrix(y_test_variees, y_pred_filtered_variees)
accuracy_filtered_variees = accuracy_score(y_test_variees, y_pred_filtered_variees)

print(f"Matrice de confusion sur les sous-ensembles de cultures différentes :\n{conf_matrix_filtered_variees}")
print(f"Accuracy des sous-ensembles de cultures différentes : {accuracy_filtered_variees}")

